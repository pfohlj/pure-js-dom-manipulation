/*****************************************************************************************
** NAME: Joseph A Pfohl
** DATE: 10/28/2016
** ASSIGNMENT: DOM and Events
** DESCRIPTION: In this assignment we're asked to, starting with only a blank html document,
** create a 4x4 table using javascript.  The tables header cells should contain text
** indicating which column the header is for and the cells below should be blank.  The top
** left non-header row should be selected and the user of the page should be able to click
** buttons on the page to move the currently selected box around the table.  There will
** also be another button which will allow the user to mark the currently selected cell.
** NOTES: Please note that I AM using bootstrap to style my page but that all script and
** meta tags required by bootstrap will be generated by THIS file.
*****************************************************************************************/

// construct the web page
buildHead();
buildBody();

// add event listeners
document.addEventListener('DOMContentLoaded', function(event) {
    var cell = document.getElementById('selected');
    setCellStyle(cell);
    updateMoveButtonsStatus(cell);

    document.getElementById('up').addEventListener('click', function(event) {
        var oldCell = document.getElementById('selected');
        var newCell = handleMove(oldCell, 1);
        if (newCell != null) {
            setCellStyle(oldCell);
            setCellStyle(newCell)
            updateMoveButtonsStatus(newCell);
        }
    });

    document.getElementById('left').addEventListener('click', function(event) {
        var oldCell = document.getElementById('selected');
        var newCell = handleMove(oldCell, 2);
        if (newCell != null) {
            setCellStyle(oldCell);
            setCellStyle(newCell)
            updateMoveButtonsStatus(newCell);
        }
    });

    document.getElementById('down').addEventListener('click', function(event) {
        var oldCell = document.getElementById('selected');
        var newCell = handleMove(oldCell, 3);
        if (newCell != null) {
            setCellStyle(oldCell);
            setCellStyle(newCell)
            updateMoveButtonsStatus(newCell);
        }
    });

    document.getElementById('right').addEventListener('click', function(event) {
        var oldCell = document.getElementById('selected');
        var newCell = handleMove(oldCell, 4);
        if (newCell != null) {
            setCellStyle(oldCell);
            setCellStyle(newCell)
            updateMoveButtonsStatus(newCell);
        }
    });

    document.getElementById('mark').addEventListener('click', function(event) {
        var cell = document.getElementById('selected');
        toggleMarkedStatus(cell);
        setCellStyle(cell);
    });
});

/*****************************************************************************************
** FUNCTION: buildHead()
** DESCRIPTION: buildHead creates two meta elements and one link element in order to
** include the required files for the bootstrap framework.  It then appends them to the
** DOM in the proper place for bootstrap to function.
** PARAMETERS: N/A
** PRE-CONDITIONS: head and title must be preexisting nodes in the DOM
** POST-CONDITIONS: all meta and link tags in the head required for bootstrap will be
** included.
*****************************************************************************************/

function buildHead() {
    // create variable called head
    var head = document.getElementsByTagName("head")[0];
    var title = document.getElementsByTagName('title')[0];

    // create required meta links for bootstrap
    var metaHTTP = document.createElement('meta');
    metaHTTP.setAttribute('http-equiv', 'X-UA-Compatible');
    metaHTTP.setAttribute('content', 'IE=edge');

    var metaViewport = document.createElement('meta');
    metaViewport.setAttribute('name', 'viewport');
    metaViewport.setAttribute('content', 'width=device-width, initial-scale=1');

    // create link to bootstrap CSS
    var bootstrapCSS = document.createElement("link");
    bootstrapCSS.setAttribute("rel", "stylesheet");
    bootstrapCSS.setAttribute("href", "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css");
    bootstrapCSS.setAttribute("crossorigin", "anonymous");

    // set up head to to use Bootstrap
    head.insertBefore(metaHTTP, title);
    head.insertBefore(metaViewport, title);
    head.appendChild(bootstrapCSS);
}

/*****************************************************************************************
** FUNCTION: buildBody()
** DESCRIPTION: buildBody does the bulk of the work as far as constructing the viewable
** webpage is concerned.  Each section of the body is created and then appended to the
** appropriate parent.  If there are children of the created node, those children are then
** created and appended to that node.  This process continues until the structure is
** fully put together.  Only once the entire document is constructed within an external
** container is that div.container appended to the DOM's body.
** PARAMETERS: n/a
** PRE-CONDITIONS: document must have a valid body element to append to.
** POST-CONDITIONS: The web page is generated and appended to the body.
*****************************************************************************************/

function buildBody() {
    var html = document.getElementsByTagName('html')[0];
    html.setAttribute('style', 'height: 100%;');

    var body = document.getElementsByTagName("body")[0];
    body.setAttribute('style', 'height: 100%;');

    var mainContainer = document.createElement('div'); // container holds all elements
    mainContainer.setAttribute('class', 'container');
    mainContainer.setAttribute('style', 'height: 100%;');

    var topSpacer = document.createElement('div'); // create space between top and first element
    topSpacer.setAttribute('class', 'row');
    topSpacer.setAttribute('style', 'height: 5%;');
    mainContainer.appendChild(topSpacer);

    // begin to create row that contains the table
    var tableRow = document.createElement('div');
    tableRow.setAttribute('class', 'row');
    tableRow.setAttribute('style', 'height: 65%;')
    mainContainer.appendChild(tableRow);

    var tableCol = document.createElement('div');
    tableCol.setAttribute('class', 'col-md-6 col-md-offset-3');
    tableCol.setAttribute('style', 'height: 100%;');
    tableRow.appendChild(tableCol);

    // table uses bootstrap classes table and table-bordered to render nicely
    var table = document.createElement('table');
    table.setAttribute('class', 'table table-bordered');
    table.setAttribute('style', 'height: 100%; width: 100%;');

    var tHead = document.createElement('thead');
    table.appendChild(tHead);

    var newRow = document.createElement('tr');
    tHead.appendChild(newRow);

    // create the table header columns
    for (var i = 1; i <= 4; i++) {
        var th = document.createElement('th');
        var headerText = document.createTextNode("Header " + i);
        th.appendChild(headerText);
        th.setAttribute('style', 'text-align: center; vertical-align: middle;')
        newRow.appendChild(th);
    }

    var tBody = document.createElement('tbody');
    table.appendChild(tBody);

    // fill the table body with 3 rows of 4 columns each
    for (var i = 1; i <= 3; i++) {
        var tr = document.createElement('tr');
        for (var j = 1; j <= 4; j++) {
            var td = document.createElement('td');
            var cellText = document.createTextNode(j + ", " + i);
            td.appendChild(cellText);
            td.setAttribute('style', 'text-align: center; vertical-align: middle;');
            td.setAttribute('data-xPos', "" + j);
            td.setAttribute('data-yPos', "" + i);
            // set cell (1, 1) to be the first selected cell
            if (j == 1 && i == 1) {
                td.setAttribute('id', 'selected');
                td.setAttribute('data-selected', 'selected');
            }
            tr.appendChild(td);
        }
        tBody.appendChild(tr);
    }

    tableCol.appendChild(table);

    var spacerRow = document.createElement('div');
    spacerRow.setAttribute('class', 'row');
    spacerRow.setAttribute('style', 'height: 5%;');
    mainContainer.appendChild(spacerRow);

    // create row for holding the buttons that select elements
    var controlRow = document.createElement('div');
    controlRow.setAttribute('class', 'row');
    controlRow.setAttribute('style', 'height: 25%;');
    mainContainer.appendChild(controlRow);

    var firstControlColumn = document.createElement('div');
    firstControlColumn.setAttribute('class', 'col-md-4 col-md-offset-3');
    firstControlColumn.setAttribute('style', 'height: 50%; text-align: center;');
    controlRow.appendChild(firstControlColumn);

    var buttonTopRow = document.createElement('div');
    buttonTopRow.setAttribute('class', 'row');
    firstControlColumn.appendChild(buttonTopRow);

    var upButtonCol = document.createElement('div');
    upButtonCol.setAttribute('class', 'col-md-4 col-md-offset-4');
    buttonTopRow.appendChild(upButtonCol);

    // grouping buttons with btn-group-justified makes them display nicer but requires a bit more code
    var upButtonGroup = document.createElement('div');
    upButtonGroup.setAttribute('class', 'btn-group btn-group-justified');
    upButtonGroup.setAttribute('role', 'group');
    upButtonCol.appendChild(upButtonGroup);

    var nestedGroup = document.createElement('div');
    nestedGroup.setAttribute('class', 'btn-group');
    nestedGroup.setAttribute('role', 'group');
    upButtonGroup.appendChild(nestedGroup);

    // each button has a button element and a span element that uses the bootstrap built in
    // gliphicons to add icons to the buttons
    var upButton = document.createElement('button');
    upButton.setAttribute('type', 'button');
    upButton.setAttribute('class', 'btn btn-default');
    upButton.setAttribute('id', 'up');
    nestedGroup.appendChild(upButton);

    var upSpan = document.createElement('span');
    upSpan.setAttribute('class', 'glyphicon glyphicon-arrow-up');
    upButton.appendChild(upSpan);

    var buttonBottomRow = document.createElement('div');
    buttonBottomRow.setAttribute('class', 'row');
    firstControlColumn.appendChild(buttonBottomRow);

    var bottomButtonCol = document.createElement('div');
    bottomButtonCol.setAttribute('class', 'col-md-10  col-md-offset-1');
    buttonBottomRow.appendChild(bottomButtonCol);

    var bottomButtonGroup = document.createElement('div');
    bottomButtonGroup.setAttribute('class', 'btn-group btn-group-justified');
    bottomButtonGroup.setAttribute('role', 'group');
    bottomButtonCol.appendChild(bottomButtonGroup);

    var leftButtonGroup = document.createElement('div');
    leftButtonGroup.setAttribute('class', 'btn-group');
    leftButtonGroup.setAttribute('role', 'group');
    bottomButtonGroup.appendChild(leftButtonGroup);

    var leftButton = document.createElement('button');
    leftButton.setAttribute('type', 'button');
    leftButton.setAttribute('class', 'btn btn-default');
    leftButton.setAttribute('id', 'left');
    leftButtonGroup.appendChild(leftButton);

    var leftSpan = document.createElement('span');
    leftSpan.setAttribute('class', 'glyphicon glyphicon-arrow-left');
    leftButton.appendChild(leftSpan);

    var downButtonGroup = document.createElement('div');
    downButtonGroup.setAttribute('class', 'btn-group');
    downButtonGroup.setAttribute('role', 'group');
    bottomButtonGroup.appendChild(downButtonGroup);

    var downButton = document.createElement('button');
    downButton.setAttribute('type', 'button');
    downButton.setAttribute('class', 'btn btn-default');
    downButton.setAttribute('id', 'down');
    downButtonGroup.appendChild(downButton);

    var downSpan = document.createElement('span');
    downSpan.setAttribute('class', 'glyphicon glyphicon-arrow-down');
    downButton.appendChild(downSpan);

    var rightButtonGroup = document.createElement('div');
    rightButtonGroup.setAttribute('class', 'btn-group');
    rightButtonGroup.setAttribute('role', 'group');
    bottomButtonGroup.appendChild(rightButtonGroup);

    var rightButton = document.createElement('button');
    rightButton.setAttribute('type', 'button');
    rightButton.setAttribute('class', 'btn btn-default');
    rightButton.setAttribute('id', 'right');
    rightButtonGroup.appendChild(rightButton);

    var rightSpan = document.createElement('span');
    rightSpan.setAttribute('class', 'glyphicon glyphicon-arrow-right');
    rightButton.appendChild(rightSpan);

    var secondControlColumn = document.createElement('div');
    secondControlColumn.setAttribute('class', 'col-md-2');
    secondControlColumn.setAttribute('style', 'height: 50%;');
    controlRow.appendChild(secondControlColumn);

    var markRowSpacer = document.createElement('div');
    markRowSpacer.setAttribute('class', 'row');
    markRowSpacer.setAttribute('style', 'height: 38%;');
    secondControlColumn.appendChild(markRowSpacer);

    var markButtonRow = document.createElement('div');
    markButtonRow.setAttribute('class', 'row');
    secondControlColumn.appendChild(markButtonRow);

    var markButtonCol = document.createElement('div');
    markButtonCol.setAttribute('class', 'col-md-10 col-md-offset-1');
    markButtonRow.appendChild(markButtonCol);

    var markButtonJustified = document.createElement('div');
    markButtonJustified.setAttribute('class', 'btn-group btn-group-justified');
    markButtonJustified.setAttribute('role', 'group');
    markButtonCol.appendChild(markButtonJustified);

    var markButtonGroup = document.createElement('div');
    markButtonGroup.setAttribute('class', 'btn-group');
    markButtonGroup.setAttribute('role', 'group');
    markButtonJustified.appendChild(markButtonGroup);

    var markButton = document.createElement('button');
    markButton.setAttribute('type', 'button');
    markButton.setAttribute('class', 'btn btn-default');
    markButton.setAttribute('id', 'mark');
    markButtonGroup.appendChild(markButton);

    var markButtonText = document.createTextNode('Mark Cell ');
    markButton.appendChild(markButtonText);

    var markSpan = document.createElement('span');
    markSpan.setAttribute('class', 'glyphicon glyphicon-pencil');
    markButton.appendChild(markSpan);

    // basic instructions for interacting with the document
    var instructionContainer = document.createElement('div');
    instructionContainer.setAttribute('class', 'col-md-6 col-md-offset-3');
    instructionContainer.setAttribute('style', 'height: 50%; text-align: center;');
    controlRow.appendChild(instructionContainer);

    var instructionParagraph = document.createElement('p');
    instructionContainer.appendChild(instructionParagraph);

    var instructionText1 = "Use the arrow buttons to change which cell is selected.  To "
                         + "mark or unmark a cell, use the button with the ";
    var instructionText2 = " symbol."

    var instruction1 = document.createTextNode(instructionText1);
    var instructionSpan = document.createElement('span');
    instructionSpan.setAttribute('class', 'glyphicon glyphicon-pencil');
    var instruction2 = document.createTextNode(instructionText2);

    instructionParagraph.appendChild(instruction1);
    instructionParagraph.appendChild(instructionSpan);
    instructionParagraph.appendChild(instruction2);

    // append the main container to the body only after it is completely built.
    body.appendChild(mainContainer);
}

/*****************************************************************************************
** FUNCTION: setCellStyle()
** DESCRIPTION: Adds the proper styling to a given cell based on the attributes that the
** cell has.  Four options define all possible states for any cell in the table.  A cell
** can be selected and marked, selected and not marked, not selected and marked, or not
** selected and not marked
** PARAMETERS: cell - the cell node to be styled based on its attributes
** PRE-CONDITIONS: cell must be a valid cell node
** POST-CONDITIONS: cell will be styled
*****************************************************************************************/

function setCellStyle(cell) {
    // get current selected and marked status
    var selected = cell.hasAttribute('data-selected');
    var marked = cell.hasAttribute('data-marked');

    // style strings for applying proper styles to cells being toggled
    var selected_marked = 'text-align: center; vertical-align: middle; border: 3px solid black; background-color: #f4f0ad;';
    var selected_notMarked = 'text-align: center; vertical-align: middle; border: 3px solid black;';
    var notSelected_marked = 'text-align: center; vertical-align: middle; background-color: #f4f0ad'
    var notSelected_notMarked = 'text-align: center; vertical-align: middle;';

    // set style
    if (selected && marked) {
        cell.setAttribute('style', selected_marked);
    } else if (selected && !marked) {
        cell.setAttribute('style', selected_notMarked);
    } else if (!selected && marked) {
        cell.setAttribute('style', notSelected_marked);
    } else if (!selected && !marked) {
        cell.setAttribute('style', notSelected_notMarked);
    }
}

/*****************************************************************************************
** FUNCTION: updateMoveButtonsStatus()
** DESCRIPTION: checks for the current position of the selected cell.  If the cell is at
** one of the boundaries of the table, any buttons that would create an invalid move are
** set as disabled to prevent the user from attempting to make an invalid move
** PARAMETERS: cell - the currently selected cell should be passed in to this function
** PRE-CONDITIONS: cell must be a valid tr node
** POST-CONDITIONS: the directional buttons will be updated based on the position of the
** tr node passed into the function
*****************************************************************************************/

function updateMoveButtonsStatus(cell) {
    // get the position of the selected cell
    var xpos = cell.getAttribute('data-xpos');
    var ypos = cell.getAttribute('data-ypos');

    // get the button nodes
    var left = document.getElementById('left');
    var right = document.getElementById('right');
    var up = document.getElementById('up');
    var down = document.getElementById('down');

    // check and handle if left or right buttons need to be deactiveated or reactivated
    if (xpos == 1 && !left.hasAttribute('disabled')) {
        left.setAttribute('disabled', 'disabled');
    } else if (xpos == 4 && !right.hasAttribute('disabled')) {
        right.setAttribute('disabled', 'disabled');
    } else if (xpos != 1 && left.hasAttribute('disabled')) {
        left.removeAttribute('disabled');
    } else if (xpos != 4 && right.hasAttribute('disabled')) {
        right.removeAttribute('disabled');
    }

    // check and handle if up or down buttons need to be deactivated or reactivated
    if (ypos == 1 && !up.hasAttribute('disabled')) {
        up.setAttribute('disabled', 'disabled');
    } else if (ypos == 3 && !down.hasAttribute('disabled')) {
        down.setAttribute('disabled', 'disabled');
    } else if (ypos != 1 && up.hasAttribute('disabled')) {
        up.removeAttribute('disabled');
    } else if (ypos != 3 && down.hasAttribute('disabled')) {
        down.removeAttribute('disabled');
    }
}

/*****************************************************************************************
** FUNCTION: handleMove()
** DESCRIPTION: calculates the cell position of the new selected cell based on the old
** selected cell.  Returns the new cell node. Despite the fact that invalid moves should
** be prevented by buttons being disabled, invalid moves are caught by this function and
** if somehow they are passed in, the function will return null.
** PARAMETERS: oldCell - the tr node for the cell being moved from, direction - an integer
** indicating the direction the user desires to move. 1 = up, 2 = left, 3 = down, and
** 4 = right.
** PRE-CONDITIONS: oldCell must be a valid selected tr node
** POST-CONDITIONS: old cell will have the data-selected attribute removed and the id
** selected removed and the new tr node that is returned will have those corresponding
** attributes added to it.
*****************************************************************************************/

function handleMove(oldCell, direction) {
    // declare variables
    var xpos, ypos, queryString, newCell;

    switch (direction) {
        case 1: // up
            if (oldCell.getAttribute('data-ypos') == 1) {
                return null;
            } else {
                // get and set values of xpos and ypos for new selected node
                xpos = oldCell.getAttribute('data-xpos');
                ypos = (parseInt(oldCell.getAttribute('data-ypos')) - 1).toString();

                // get the new selected cell
                queryString = 'td[data-xpos="' + xpos + '"][data-ypos="' + ypos + '"]';
                newCell = document.querySelector(queryString);

                // change which cell is 'selected'
                oldCell.removeAttribute('data-selected');
                oldCell.removeAttribute('id');
                newCell.setAttribute('data-selected', 'selected');
                newCell.setAttribute('id', 'selected');

                // return newly selected cell
                return newCell;
            }
            break;
        case 2: // left
            if (oldCell.getAttribute('data-xpos') == 1) {
                return null;
            } else {
                // get and set values of xpos and ypos for new selected node
                xpos = (parseInt(oldCell.getAttribute('data-xpos')) - 1).toString();
                ypos = oldCell.getAttribute('data-ypos');

                // get the new selected cell
                queryString = 'td[data-xpos="' + xpos + '"][data-ypos="' + ypos + '"]';
                newCell = document.querySelector(queryString);

                // change which cell is 'selected'
                oldCell.removeAttribute('data-selected');
                oldCell.removeAttribute('id');
                newCell.setAttribute('data-selected', 'selected');
                newCell.setAttribute('id', 'selected');

                // return newly selected cell
                return newCell;
            }
            break;
        case 3: // down
            if (oldCell.getAttribute('data-ypos') == 3) {
                return null;
            } else {
                // get and set values of xpos and ypos for new selected node
                xpos = oldCell.getAttribute('data-xpos');
                ypos = (parseInt(oldCell.getAttribute('data-ypos')) + 1).toString();

                // get the new selected cell
                queryString = 'td[data-xpos="' + xpos + '"][data-ypos="' + ypos + '"]';
                newCell = document.querySelector(queryString);

                // change which cell is 'selected'
                oldCell.removeAttribute('data-selected');
                oldCell.removeAttribute('id');
                newCell.setAttribute('data-selected', 'selected');
                newCell.setAttribute('id', 'selected');

                // return newly selected cell
                return newCell;
            }
            break;
        case 4: // right
            if (oldCell.getAttribute('data-xpos') == 4) {
                return null;
            } else {
                // get and set values of xpos and ypos for new selected node
                xpos = (parseInt(oldCell.getAttribute('data-xpos')) + 1).toString();
                ypos = oldCell.getAttribute('data-ypos');

                // get the new selected cell
                queryString = 'td[data-xpos="' + xpos + '"][data-ypos="' + ypos + '"]';
                newCell = document.querySelector(queryString);

                // change which cell is 'selected'
                oldCell.removeAttribute('data-selected');
                oldCell.removeAttribute('id');
                newCell.setAttribute('data-selected', 'selected');
                newCell.setAttribute('id', 'selected');

                // return newly selected cell
                return newCell;
            }
            break;
    }
    return null;
}

/*****************************************************************************************
** FUNCTION: toggleMarkedStatus()
** DESCRIPTION: toggles the marked status based on the passed in cell's having or not
** having the data-marked attribute
** PARAMETERS: cell - the cell which will have its data-marked attribute toggled
** PRE-CONDITIONS: cell must be a valid tr node
** POST-CONDITIONS: cell will have its data-marked attribute toggled on or off
*****************************************************************************************/

function toggleMarkedStatus(cell) {
    if (cell.hasAttribute('data-marked')) {
        cell.removeAttribute('data-marked');
    } else {
        cell.setAttribute('data-marked', 'marked');
    }
}
